name: Deploy mm to Nx

on: push

jobs:
  prepare:
    name: Prepare Nexus
    runs-on: ubuntu-latest
    steps:
      - name: Start Sonatype Nexus container
        run: |
          docker login -u ${{secrets.DOCKERHUB_USER}} -p ${{secrets.DOCKERHUB_PASS}}
          docker volume create nexus-volume
          docker run -d -p 8081:8081 --name nexus --volume nexus-volume:/nexus-data/:rw sonatype/nexus3
      - name: Check Nexus status
        run: |
          while true; 
          do \
            echo "Checking Nexus status"
            sleep 10 
            docker container logs nexus 2>&1 | grep "Started Sonatype Nexus OSS" && break
          done
      - id: nexus-password
        name: Get admin password
        run: |
          pass=$(docker exec nexus cat /nexus-data/admin.password)
          echo "::set-output name=nexus-password::$pass"
      - name: Change default admin password
        run: |
          curl -ifu admin:"${{steps.nexus-password.outputs.nexus-password}}" \
          -XPUT -H 'Content-Type: text/plain' \
          --data "${{secrets.NEW_NEXUS_ADMIN_PASSWORD}}" \
          http://localhost:8081/service/rest/v1/security/users/admin/change-password
      - name: Enable anonymous access
        run: |
          anonymousaccess=$(curl -X 'PUT' \
          'http://localhost:8081/service/rest/v1/security/anonymous' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -u 'admin:${{secrets.NEW_NEXUS_ADMIN_PASSWORD}}' \
          -s \
          -d '{"enabled": true}' | jq '.enabled') && [[ $anonymousaccess == "true" ]]
      - name: Create repository for release candidates
        run: |
          curl -X 'POST' \
          'http://localhost:8081/service/rest/v1/repositories/maven/hosted' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -u 'admin:${{secrets.NEW_NEXUS_ADMIN_PASSWORD}}' \
          -d '{
                "name": "maven-release-candidates",
                "online": true,
                "storage": {
                  "blobStoreName": "default",
                  "strictContentTypeValidation": true,
                  "writePolicy": "allow_once"
                },
                "maven": {
                  "versionPolicy": "MIXED",
                  "layoutPolicy": "STRICT",
                  "contentDisposition": "ATTACHMENT"
                }
              }'
      - name: Check fail
        run: |
          curl -X 'POST' \
          'http://localhost:8081/service/rest/v1/repositories/maven/hosted' \
          -H 'accept: application/json' \
          -H 'Content-Type: application/json' \
          -u 'admin:${{secrets.NEW_NEXUS_ADMIN_PASSWORD}}' \
          -d '{
                "name": "maven-release-candidates",
                "online": true,
                "storage": {
                  "blobStoreName": "default",
                  "strictContentTypeValidation": true,
                  "writePolicy": "allow_once"
                },
                "maven": {
                  "versionPolicy": "MIXED",
                  "layoutPolicy": "STRICT",
                  "contentDisposition": "ATTACHMENT"
                }
              }'

  build-mm:
    needs: [prepare]
    name: Build multimodule
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '8'
      - name: Build multimodule
        run: mvn clean package -f multimodule/pom.xml
  
  deploy-mm:
    needs: [prepare,build-mm]
    name: Deploy multimodule
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        run: echo "deploy"

  build-simple:
    needs: [prepare]
    name: Build simple
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: '8'
      - name: Build multimodule
        run: mvn clean package -f simple-app/pom.xml

  deploy-simple:
    needs: [prepare,build-simple]
    name: Deploy simple
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        run: echo "deploy"

  check-deployment:
    needs: [deploy-mm,deploy-simple]
    name: Check deployed artifacts
    runs-on: ubuntu-latest
    steps:
      - name: Check Deploy
        run: echo "Check deploy"
